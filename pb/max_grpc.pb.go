// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/max.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReturnIfMaxServiceClient is the client API for ReturnIfMaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReturnIfMaxServiceClient interface {
	ReturnIfMax(ctx context.Context, opts ...grpc.CallOption) (ReturnIfMaxService_ReturnIfMaxClient, error)
}

type returnIfMaxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReturnIfMaxServiceClient(cc grpc.ClientConnInterface) ReturnIfMaxServiceClient {
	return &returnIfMaxServiceClient{cc}
}

func (c *returnIfMaxServiceClient) ReturnIfMax(ctx context.Context, opts ...grpc.CallOption) (ReturnIfMaxService_ReturnIfMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReturnIfMaxService_ServiceDesc.Streams[0], "/ReturnIfMaxService/ReturnIfMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &returnIfMaxServiceReturnIfMaxClient{stream}
	return x, nil
}

type ReturnIfMaxService_ReturnIfMaxClient interface {
	Send(*ReturnIfMaxRequest) error
	Recv() (*ReturnIfMaxResponse, error)
	grpc.ClientStream
}

type returnIfMaxServiceReturnIfMaxClient struct {
	grpc.ClientStream
}

func (x *returnIfMaxServiceReturnIfMaxClient) Send(m *ReturnIfMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *returnIfMaxServiceReturnIfMaxClient) Recv() (*ReturnIfMaxResponse, error) {
	m := new(ReturnIfMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReturnIfMaxServiceServer is the server API for ReturnIfMaxService service.
// All implementations must embed UnimplementedReturnIfMaxServiceServer
// for forward compatibility
type ReturnIfMaxServiceServer interface {
	ReturnIfMax(ReturnIfMaxService_ReturnIfMaxServer) error
	mustEmbedUnimplementedReturnIfMaxServiceServer()
}

// UnimplementedReturnIfMaxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReturnIfMaxServiceServer struct {
}

func (UnimplementedReturnIfMaxServiceServer) ReturnIfMax(ReturnIfMaxService_ReturnIfMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method ReturnIfMax not implemented")
}
func (UnimplementedReturnIfMaxServiceServer) mustEmbedUnimplementedReturnIfMaxServiceServer() {}

// UnsafeReturnIfMaxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReturnIfMaxServiceServer will
// result in compilation errors.
type UnsafeReturnIfMaxServiceServer interface {
	mustEmbedUnimplementedReturnIfMaxServiceServer()
}

func RegisterReturnIfMaxServiceServer(s grpc.ServiceRegistrar, srv ReturnIfMaxServiceServer) {
	s.RegisterService(&ReturnIfMaxService_ServiceDesc, srv)
}

func _ReturnIfMaxService_ReturnIfMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReturnIfMaxServiceServer).ReturnIfMax(&returnIfMaxServiceReturnIfMaxServer{stream})
}

type ReturnIfMaxService_ReturnIfMaxServer interface {
	Send(*ReturnIfMaxResponse) error
	Recv() (*ReturnIfMaxRequest, error)
	grpc.ServerStream
}

type returnIfMaxServiceReturnIfMaxServer struct {
	grpc.ServerStream
}

func (x *returnIfMaxServiceReturnIfMaxServer) Send(m *ReturnIfMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *returnIfMaxServiceReturnIfMaxServer) Recv() (*ReturnIfMaxRequest, error) {
	m := new(ReturnIfMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReturnIfMaxService_ServiceDesc is the grpc.ServiceDesc for ReturnIfMaxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReturnIfMaxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReturnIfMaxService",
	HandlerType: (*ReturnIfMaxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReturnIfMax",
			Handler:       _ReturnIfMaxService_ReturnIfMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/max.proto",
}

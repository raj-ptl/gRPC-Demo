// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/primes.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetPrimesServiceClient is the client API for GetPrimesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetPrimesServiceClient interface {
	GetPrimes(ctx context.Context, in *GetPrimesRequest, opts ...grpc.CallOption) (GetPrimesService_GetPrimesClient, error)
}

type getPrimesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetPrimesServiceClient(cc grpc.ClientConnInterface) GetPrimesServiceClient {
	return &getPrimesServiceClient{cc}
}

func (c *getPrimesServiceClient) GetPrimes(ctx context.Context, in *GetPrimesRequest, opts ...grpc.CallOption) (GetPrimesService_GetPrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetPrimesService_ServiceDesc.Streams[0], "/GetPrimesService/GetPrimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &getPrimesServiceGetPrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetPrimesService_GetPrimesClient interface {
	Recv() (*GetPrimesResponse, error)
	grpc.ClientStream
}

type getPrimesServiceGetPrimesClient struct {
	grpc.ClientStream
}

func (x *getPrimesServiceGetPrimesClient) Recv() (*GetPrimesResponse, error) {
	m := new(GetPrimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetPrimesServiceServer is the server API for GetPrimesService service.
// All implementations must embed UnimplementedGetPrimesServiceServer
// for forward compatibility
type GetPrimesServiceServer interface {
	GetPrimes(*GetPrimesRequest, GetPrimesService_GetPrimesServer) error
	mustEmbedUnimplementedGetPrimesServiceServer()
}

// UnimplementedGetPrimesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetPrimesServiceServer struct {
}

func (UnimplementedGetPrimesServiceServer) GetPrimes(*GetPrimesRequest, GetPrimesService_GetPrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPrimes not implemented")
}
func (UnimplementedGetPrimesServiceServer) mustEmbedUnimplementedGetPrimesServiceServer() {}

// UnsafeGetPrimesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetPrimesServiceServer will
// result in compilation errors.
type UnsafeGetPrimesServiceServer interface {
	mustEmbedUnimplementedGetPrimesServiceServer()
}

func RegisterGetPrimesServiceServer(s grpc.ServiceRegistrar, srv GetPrimesServiceServer) {
	s.RegisterService(&GetPrimesService_ServiceDesc, srv)
}

func _GetPrimesService_GetPrimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPrimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetPrimesServiceServer).GetPrimes(m, &getPrimesServiceGetPrimesServer{stream})
}

type GetPrimesService_GetPrimesServer interface {
	Send(*GetPrimesResponse) error
	grpc.ServerStream
}

type getPrimesServiceGetPrimesServer struct {
	grpc.ServerStream
}

func (x *getPrimesServiceGetPrimesServer) Send(m *GetPrimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GetPrimesService_ServiceDesc is the grpc.ServiceDesc for GetPrimesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetPrimesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetPrimesService",
	HandlerType: (*GetPrimesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPrimes",
			Handler:       _GetPrimesService_GetPrimes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/primes.proto",
}
